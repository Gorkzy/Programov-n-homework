# class Auto:
#     def __init__(self, znacka, model, rok):
#         self.znacka = znacka
#         self.model = model
#         self.rok = rok
    
#     def info(self):
#         return f"{self.znacka} {self.model} z roku {self.rok}"
    
# moje_auto = Auto("Škoda", "Octavia", 2020)
# print(moje_auto.info())


# class Auto:
#     def __init__(self, znacka, model, rok, vykon):
#         self.znacka = znacka
#         self.model = model
#         self.rok = rok
#         self.vykon = vykon
    
#     def info(self):
#         return f"Moje auto je {self.znacka} {self.model} z roku {self.rok} a má výkon {self.vykon} kw"

# moje_auto = Auto("BMW", "M2 Competition", 2021, 410)
# print(moje_auto.info())  # BMW M2 Competition z roku 2020 a má výkon

# class Osoba:
#     pocet_osob = 0  # Atribut třídy
    
#     def __init__(self, jmeno, vek):
#         self.jmeno = jmeno  # Atribut instance
#         self.vek = vek
#         Osoba.pocet_osob += 1
    
#     def info(self):
#         return f"{self.jmeno} je {self.vek} let starý."
    
#     @classmethod
#     def pocet(cls):
#         return f"Počet osob: {cls.pocet_osob}"
    
#     @staticmethod
#     def pozdrav():
#         return "Ahoj světe!"

# # Vytvoření objektů
# osoba1 = Osoba("Jan", 30)
# osoba2 = Osoba("Eva", 25)

# # Volání metod
# print(osoba1.info())
# print(Osoba.pocet())
# print(Osoba.pozdrav())
# Ukol 1
# class Auto:
#     def __init__(self, model, rok, znacka, vykon, barva, cena):
#         self.model = model
#         self.rok = rok
#         self.znacka = znacka
#         self.vykon = vykon
#         self.barva = barva
#         self.cena = cena
#     def celkove_info(self):
#         return f"Model: {self.model}, Rok výroby: {self.rok}, Značka : {self.znacka}, Výkon: {self.vykon} kW, Barva : {self.barva}, Cena: {self.cena} Kč"

#     def set_model(self, model):
#         self.model = model
    
#     def set_rok(self, rok):
#         self.rok = rok
    
#     def set_znacka(self, znacka):
#         self.znacka = znacka
    
#     def set_vykon(self, vykon):
#         self.vykon = vykon
    
#     def set_barva(self, barva):
#         self.barva = barva
    
#     def set_cena(self, cena):
#         self.cena = cena

    
#     def get_model(self, model):
#         self.model = model
    
#     def get_rok(self, rok):
#         self.rok = rok
    
#     def get_znacka(self, znacka):
#         self.znacka = znacka
    
#     def get_vykon(self, vykon):
#         self.vykon = vykon
    
#     def get_barva(self, barva):
#         self.barva = barva
    
#     def get_cena(self, cena):
#         self.cena = cena

# moje_auto = Auto ("M2 Competition", 2021, "BMW", 410, "černá",1200000)
# print(moje_auto.celkove_info())
# moje_auto.set_barva("Bílá")
# moje_auto.set_cena (1500000)

# print("\nAktualizované informace o autě:")
# print(f"Cena: {moje_auto.cena} Kč")
# print(f"Barva: {moje_auto.barva}")
# Ukol 2
# class Kniha:
#     def __init__(self, nazev, rok, vydavatel, zanr, autor, cena):
#         self.nazev = nazev
#         self.rok = rok
#         self.vydavatel = vydavatel
#         self.zanr = zanr
#         self.autor = autor
#         self.cena = cena

#     def zobraz_info(self):
#         return (f"Název: {self.nazev}\n"
#                 f"Rok vydání: {self.rok}\n"
#                 f"Vydavatel: {self.vydavatel}\n"
#                 f"Žánr: {self.zanr}\n"
#                 f"Autor: {self.autor}\n"
#                 f"Cena: {self.cena} Kč")
    
    
#     def nastav_nazev(self, nazev):
#         self.nazev = nazev
    
#     def nastav_rok(self, rok):
#         self.rok = rok
    
#     def nastav_vydavatel(self, vydavatel):
#         self.vydavatel = vydavatel
    
#     def nastav_zanr(self, zanr):
#         self.zanr = zanr
    
#     def nastav_autor(self, autor):
#         self.autor = autor
    
#     def nastav_cena(self, cena):
#         self.cena = cena

#     def ziskej_nazev(self):
#         return self.nazev
    
#     def ziskej_rok(self):
#         return self.rok
    
#     def ziskej_vydavatel(self):
#         return self.vydavatel
    
#     def ziskej_zanr(self):
#         return self.zanr
    
#     def ziskej_autor(self):
#         return self.autor
    
#     def ziskej_cena(self):
#         return self.cena

# moje_kniha = Kniha("Pán prstenů", 1954, "Allen & Unwin", "Fantasy", "J.R.R. Tolkien", 350)
# print(moje_kniha.zobraz_info())

# moje_kniha.nastav_cena(300)

# print("Aktualizovaná cena knihy:")
# print(f"Cena: {moje_kniha.ziskej_cena()} Kč")

# Ukol 3

# class Stadion:
#     def __init__(self, nazev, otevreni, zeme, mesto, sedadla):
#         self.nazev = nazev
#         self.otevreni = otevreni
#         self.zeme = zeme
#         self.mesto = mesto
#         self.sedadla = sedadla  

#     def info(self):
#         return f"Stadion: {self.nazev}, Otevřen: {self.otevreni}, Země: {self.zeme}, Město: {self.mesto}, Počet sedadel: {self.sedadla}"
#     def vloz_nazev(self, nazev):
#         self.nazev = nazev 
#     def vloz_otevreni(self, otevreni):
#         self.otevreni = otevreni
#     def vloz_zeme(self, zeme):
#         self.zeme = zeme
#     def vloz_mesto(self, mesto):
#         self.mesto = mesto
#     def vloz_sedadla(self, sedadla):    
#         self.sedadla = sedadla


#     def ziskej_nazev(self):
#         return self.nazev
#     def ziskej_otevreni(self):
#         return self.otevreni
#     def ziskej_zeme(self):
#         return self.zeme
#     def ziskej_mesto(self):
#         return self.mesto
#     def ziskej_sedadla(self):
#         return self.sedadla
    
# muj_Stadion = Stadion("Banik", 1985, "Česko", "Ostrava", 12000)
# print(muj_Stadion.info()) 

# muj_Stadion.vloz_sedadla(15000)
# print("\nAktualizované informace o stadionu:")
# print(f"Kapacita:{muj_Stadion.ziskej_sedadla()} diváků")

# class Auto:
#     def __init__(self, rychlost, vaha):
#         self.rychlost = rychlost
#         self.vaha = vaha
    
#     def checkSpeedLimitObec(self):
#         limit = 50  
#         if self.rychlost > limit:
#             return f"Rychlost {self.rychlost} km/h je nad povolený limit {limit} km/h ve městě."
#         else:
#             return f"Rychlost {self.rychlost} km/h je v mezích povoleného limitu {limit} km/h ve městě."

#     def checkSpeedLimitDalnice(self):
#         limit = 130  
#         if self.rychlost > limit:
#             return f"Rychlost {self.rychlost} km/h je nad povolený limit {limit} km/h na dálnici."
#         else:
#             return f"Rychlost {self.rychlost} km/h je v mezích povoleného limitu {limit} km/h na dálnici."


# auto = Auto(rychlost=60, vaha=1500)
# print(auto.checkSpeedLimitObec())
# print(auto.checkSpeedLimitDalnice())

# class Student:
#     def __init__(self, name, age):
#         self.__name = None
#         self.__age = None
#         self.setName(name)
#         self.setAge(age)
#     def showInfo(self):
#         return f"Student {self.name} is {self.age} years old."
#     def showMsg(self, msgText):
#         return f"Student {self.name} says '{msgText}'."
#     # Setter
#     def setAge(self, age):
#         if age >= 18:
#             self.__age = age
#         else:
#             print("Error: Age must be 18 or older. Age not updated.")
#     def setName(self, name):
#         self.__name = name
#     # Getter
#     def getAge(self):
#         return self.age
    

#     @staticmethod
#     def sayGreetings():
#         return f"Hello, I am a student."
# student = Student("Alice", 20)
# print(student.showInfo())
# print(student.spec)
# print(student.showMsg("hello"))
# print(student.sayGreetings())

# import re
# class myOperator:
#     @staticmethod
#     def incrementer(string):
#         numbers = [float(s) for s in re.findall(r'-?\d+\.?\d*', string)]
#         result = []
#         for number in numbers:
#             result.append(number + 1)
#         return result
#     @staticmethod
#     def decrementer(string):
#         numbers = [float(s) for s in re.findall(r'-?\d+\.?\d*', string)]
#         result = []
#         for number in numbers:
#             result.append(number - 1)
#         return result
# userStr = "Extract 500 , 100.45, 23.1 and 1000 from my string"
# print(myOperator.incrementer(userStr))
# print(myOperator.decrementer(userStr))

# class ObjectCenter:
#     count = 0
#     def __init__(self):
#         ObjectCenter.count += 1
#     @staticmethod
#     def getCount():
#         return ObjectCenter.count
    
# obj1 = ObjectCenter()
# obj2 = ObjectCenter()
# obj3 = ObjectCenter()
# obj4 = ObjectCenter()
# obj5 = ObjectCenter()
# print(ObjectCenter.getCount())  # 5
# class Student:
#     def __init__(self, name, grades):
#         self.name = name
#         self.grades = grades
#     @staticmethod
#     def is_valid_age(age):
#         return 18 <= age <= 25
#     @staticmethod
#     def calculate_average(grades):
#         return sum(grades) / len(grades) if grades else 0
# # Příklad použití
# grades = [1, 2, 3, 4, 5]
# print(Student.calculate_average(grades))
# student = Student("Alice", [1, 2, 3, 4, 5])
# print(Student.calculate_average(student.grades))
# class Student:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#     @classmethod
#     def from_string(cls, student_string):
#         name, age = student_string.split(", ")
#         return cls(name, int(age))
# student = Student.from_string("Alice, 21")
# print(student.name)
# print(student.age)
# class Film:
#     def __init__(self, originalTitle, director, genre):
#         self.originalTitle = originalTitle
#         self.director = director
#         self.genre = genre
#     def showInfo(self):
#         print("Original title: {}".format(self.originalTitle))
#         print("Director: {}".format(self.director))
#         print("Genre: {}".format(self.genre))
# class Book:
#     def __init__(self, title, author, pages):
#         self.title = title
#         self.author = author
#         self.pages = pages
#     def showInfo(self):
#         print("Title: {}".format(self.title))
#         print("Author: {}".format(self.author))
#         print("Pages: {}".format(self.pages))
# book1 = Book("Python Crash Course", "Eric Matthes", 624)
# book2 = Book("Python", "Eric Matthes", 541)
# film1 = Film("The Godfather", "Francis Ford Coppola", "Crime, drama")
# for item in (film1, book1):
#     item.showInfo()
# class Book:
#     def __init__(self, title, author, pages):
#         self.title = title
#         self.author = author
#         self.pages = pages
#     def showInfo(self):
#         print("Title: {}".format(self.title))
#         print("Author: {}".format(self.author))
#         print("Pages: {}".format(self.pages))
#     def __str__(self) -> str:
#         return f"Title: {self.title}, Author: {self.author}, Pages: {self.pages}"
#     def __eq__(self, value: object) -> bool:
#         return self.title == value.title and self.author == value.author and self.pages == value.pages
#     def __gt__(self, value: object) -> bool:
#         return self.pages > value.pages
#     def __add__(self, value: object) -> int:
#         return self.pages + value.pages

# book1 = Book("Python Crash Course", "Eric Matthes", 624)
# book2 = Book("Python Crash Course", "Eric Matthes", 624)
# book3 = Book("Automate the Boring Stuff", "Al Sweigart", 500)
# # book1.showInfo()
# # book2.showInfo()
# # book3.showInfo()
# print(book1)
# print(book1 == book2)
# print(book1 > book3)
# print(book1 + book3)


# class Knihovna:
#     def __init__(self, nazev, adresa, pocet_knih):
#         self.nazev = nazev
#         self.adresa = adresa
#         self.pocet_knih = pocet_knih
#     def showInfo(self):
#         print("Název knihovny: {}".format(self.nazev))
#         print("Adresa: {}".format(self.adresa))
#         print("Počet knih: {}".format(self.pocet_knih)) 
#     def __str__(self) -> str:
#         return f"Název knihovny: {self.nazev}, Adresa: {self.adresa}, Počet knih: {self.pocet_knih}"
#     def __eq__(self, value: object) -> bool:
#         return self.nazev == value.nazev and self.adresa == value.adresa and self.pocet_knih == value.pocet_knih
#     def __gt__(self, value: object) -> bool:
#         return self.pocet_knih > value.pocet_knih
#     def __add__(self, value: object) -> 'Knihovna':
#         return Knihovna(self.nazev, self.adresa, self.pocet_knih + value.pocet_knih)
#     def __sub__(self, value: object) -> int:
#         return self.pocet_knih - value.pocet_knih
#     def __mul__(self, value: object) -> int:
#         return self.pocet_knih * value.pocet_knih
#     def __truediv__(self, value: object) -> float:
#         return self.pocet_knih / value.pocet_knih


# knihovna1 = Knihovna("Městská knihovna", "Ostrava", 14500)
# knihovna2 = Knihovna("Ostravska knihovna", "Ostrava", 19200)
# knihovna3 = Knihovna("Prazska knihovna", "Praha", 15600)
# print(knihovna1)
# print(knihovna1 == knihovna2)
# print(knihovna1 > knihovna3)
# print(knihovna1 < knihovna3)
# print(knihovna1 + knihovna3)
# print(knihovna1 - knihovna3)
# print(knihovna1 * knihovna3)
# print(knihovna1 / knihovna3)
# knihovna1.showInfo()  

# import os
# import secrets

# secret_key = secrets.token_urlsafe(32)  # Nebo jiná délka
# print(secret_key)

# import math

# cislo = 15
# print(math.sqrt(cislo))  # 3.87298334620741
# print(math.pi) 
# print(math.e)
# print(math.ceil(cislo)) 
# print(math.floor(cislo))  
# class Pet
# def __init__(self, pes, kocka, papousek, krecek):
#     self.pes = pes
#     self.kocka = kocka
#     self.papousek = papousek
#     self.krecek = krecek
# def showInfo(self):
#     print("Pes: {}".format(self.pes))
#     print("Kočka: {}".format(self.kocka))
#     print("Papoušek: {}".format(self.papousek))
#     print("Křeček: {}".format(self.krecek))
# zvuk = Pet("Haf", "Mňau", "Píp", "Piškvorky")
# show = Pet("Rex", "Micka", "Kiki", "Kiki")
# typ  = Pet("Pes", "Kočka", "Papoušek", "Křeček")
# zvuk.showInfo()
# show.showInfo() 
# typ.showInfo()
# class Pet:
#     def __init__(self, name):
#         """Initializes a pet with its name."""
#         self.name = name
#     def sound(self):
#         """Method for the sound of the animal (not defined for the base class)."""
#         raise NotImplementedError("This method must be implemented in a subclass.")
#     def show(self):
#         """Displays the name of the pet."""
#         print(f"Animal's name: {self.name}")
#     def type(self):
#         """Displays the type of the pet."""
#         raise NotImplementedError("This method must be implemented in a subclass.")
# class Dog(Pet):
#     _dog_count = 0  # Static variable to track the number of created dogs
#     def __init__(self, name):
#         super().__init__(name)
#         Dog._dog_count += 1  # Increment the dog counter
#     def sound(self):
#         print(f"{self.name} says: Woof woof!")
#     def type(self):
#         print(f"{self.name} is a Dog")
#     @staticmethod
#     def get_dog_count():
#         """Returns the number of created Dog objects."""
#         return Dog._dog_count
# class Cat(Pet):
#     def sound(self):
#         print(f"{self.name} says: Meow!")
#     def type(self):
#         print(f"{self.name} is a Cat")
# class Parrot(Pet):
#     def sound(self):
#         print(f"{self.name} says: Tweet tweet!")
#     def type(self):
#         print(f"{self.name} is a Parrot")
# class Hamster(Pet):
#     def sound(self):
#         print(f"{self.name} says: Squeak squeak!")
#     def type(self):
#         print(f"{self.name} is a Hamster")
# dog1 = Dog("Rex")
# dog2 = Dog("Buddy")
# cat = Cat("Mittens")
# parrot = Parrot("Polly")
# hamster = Hamster("Hamtaro")
# # Displaying information about each pet
# print("\nAnimals and their sounds:")
# # dog1.show()
# dog1.sound()
# # dog1.type()
# # dog2.show()
# dog2.sound()
# # dog2.type()
# # cat.show()
# cat.sound()
# # cat.type()
# # parrot.show()
# parrot.sound()
# # parrot.type()
# # hamster.show()
# hamster.sound()
# # hamster.type()
# # Number of created Dog objects
# print(f"\nNumber of created Dog objects: {Dog.get_dog_count()}")
# def add_item(linked_list, value):
#     """Adds an item to the end of the linked list."""
#     linked_list.append(value)
#     print(f"Value {value} added to the list.")


# def delete_item(linked_list, value):
#     """Deletes the first occurrence of an item from the linked list."""
#     if value in linked_list:
#         linked_list.remove(value)
#         print(f"Value {value} removed from the list.")
#     else:
#         print(f"Value {value} not found in the list.")


# def show_list(linked_list):
#     """Displays the contents of the linked list."""
#     if not linked_list:
#         print("The list is empty.")
#     else:
#         print(" -> ".join(map(str, linked_list)) + " -> None")


# def contains_item(linked_list, value):
#     """Checks if the linked list contains a specific value."""
#     if value in linked_list:
#         print(f"The list contains {value}.")
#     else:
#         print(f"The list does not contain {value}.")


# def replace_item(linked_list, old_value, new_value):
#     """Replaces the first occurrence of old_value with new_value in the linked list."""
#     if old_value in linked_list:
#         index = linked_list.index(old_value)
#         linked_list[index] = new_value
#         print(f"Value {old_value} replaced with {new_value}.")
#     else:
#         print(f"Value {old_value} not found in the list.")


# def menu():
#     """Displays the menu and handles user input."""
#     linked_list = []

#     # Initial input from the user
#     numbers = input("Enter a set of numbers separated by spaces: ").split()
#     linked_list = list(map(int, numbers))

#     while True:
#         print("\nMenu:")
#         print("1. Add an item to the list")
#         print("2. Delete an item from the list")
#         print("3. Show the list contents")
#         print("4. Check if the list contains a value")
#         print("5. Replace a value in the list")
#         print("6. Exit")

#         choice = input("Enter your choice: ")

#         if choice == "1":
#             value = int(input("Enter the value to add: "))
#             add_item(linked_list, value)
#         elif choice == "2":
#             value = int(input("Enter the value to delete: "))
#             delete_item(linked_list, value)
#         elif choice == "3":
#             print("List contents:")
#             show_list(linked_list)
#         elif choice == "4":
#             value = int(input("Enter the value to check: "))
#             contains_item(linked_list, value)
#         elif choice == "5":
#             old_value = int(input("Enter the value to replace: "))
#             new_value = int(input("Enter the new value: "))
#             replace_item(linked_list, old_value, new_value)
#         elif choice == "6":
#             print("Exiting the program.")
#             break
#         else:
#             print("Invalid choice. Please try again.")


# if __name__ == "__main__":
#     menu()
# class Node:
#     """A class representing a single node in a singly linked list."""
#     def __init__(self, data):
#         self.data = data
#         self.next = None


# class SinglyLinkedList:
#     """A class representing a singly linked list."""
#     def __init__(self):
#         self.head = None

#     def add(self, data):
#         """Adds a new node with the given data to the end of the list."""
#         new_node = Node(data)
#         if not self.head:
#             self.head = new_node
#         else:
#             current = self.head
#             while current.next:
#                 current = current.next
#             current.next = new_node

#     def delete(self, data):
#         """Deletes the first node with the given data from the list."""
#         if not self.head:
#             print("The list is empty.")
#             return
#         if self.head.data == data:
#             self.head = self.head.next
#             return
#         current = self.head
#         while current.next and current.next.data != data:
#             current = current.next
#         if current.next:
#             current.next = current.next.next
#         else:
#             print(f"Value {data} not found in the list.")

#     def show(self):
#         """Displays the contents of the list."""
#         if not self.head:
#             print("The list is empty.")
#             return
#         current = self.head
#         while current:
#             print(current.data, end=" -> ")
#             current = current.next
#         print("None")

#     def contains(self, data):
#         """Checks if the list contains the given value."""
#         current = self.head
#         while current:
#             if current.data == data:
#                 return True
#             current = current.next
#         return False

#     def replace(self, old_data, new_data):
#         """Replaces the first occurrence of old_data with new_data."""
#         current = self.head
#         while current:
#             if current.data == old_data:
#                 current.data = new_data
#                 return
#             current = current.next
#         print(f"Value {old_data} not found in the list.")


# def menu():
#     """Displays the menu and handles user input."""
#     linked_list = SinglyLinkedList()

#     # Initial input from the user
#     numbers = input("Enter a set of numbers separated by spaces: ").split()
#     for num in numbers:
#         linked_list.add(int(num))

#     while True:
#         print("\nMenu:")
#         print("1. Add an item to the list")
#         print("2. Delete an item from the list")
#         print("3. Show the list contents")
#         print("4. Check if the list contains a value")
#         print("5. Replace a value in the list")
#         print("6. Exit")

#         choice = input("Enter your choice: ")

#         if choice == "1":
#             value = int(input("Enter the value to add: "))
#             linked_list.add(value)
#             print(f"Value {value} added to the list.")
#         elif choice == "2":
#             value = int(input("Enter the value to delete: "))
#             linked_list.delete(value)
#         elif choice == "3":
#             print("List contents:")
#             linked_list.show()
#         elif choice == "4":
#             value = int(input("Enter the value to check: "))
#             if linked_list.contains(value):
#                 print(f"The list contains {value}.")
#             else:
#                 print(f"The list does not contain {value}.")
#         elif choice == "5":
#             old_value = int(input("Enter the value to replace: "))
#             new_value = int(input("Enter the new value: "))
#             linked_list.replace(old_value, new_value)
#         elif choice == "6":
#             print("Exiting the program.")
#             break
#         else:
#             print("Invalid choice. Please try again.")


# if __name__ == "__main__":
#     menu()